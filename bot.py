import discord
from discord.ext import commands
import logging
from datetime import datetime
from utils.permissions import check_moderation_permissions, get_target_user
from utils.logger import log_moderation_action

class ModerationBot(commands.Bot):
    """Bot de mod√©ration Discord"""
    
    def __init__(self):
        # Configuration des intents n√©cessaires
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True
        intents.guilds = True
        
        # Initialisation du bot avec pr√©fixe "+"
        super().__init__(
            command_prefix='+',
            intents=intents,
            help_command=None  # On va cr√©er notre propre commande help
        )
        
        self.logger = logging.getLogger(__name__)
        
    async def on_ready(self):
        """Event d√©clench√© quand le bot est connect√©"""
        self.logger.info(f"‚úÖ {self.user} est maintenant connect√©!")
        self.logger.info(f"üìä Connect√© √† {len(self.guilds)} serveur(s)")
        
        # D√©finir l'activit√© du bot
        activity = discord.Activity(
            type=discord.ActivityType.watching,
            name="les r√®gles | +help"
        )
        await self.change_presence(activity=activity)
    
    async def on_command_error(self, ctx, error):
        """Gestion globale des erreurs de commandes"""
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("‚ùå Vous n'avez pas les permissions n√©cessaires pour cette commande!")
            self.logger.error(f"Permissions manquantes pour {ctx.author} dans {ctx.guild}: {error}")
        elif isinstance(error, commands.BotMissingPermissions):
            await ctx.send("‚ùå Le bot n'a pas les permissions n√©cessaires pour effectuer cette action!")
            self.logger.error(f"Permissions bot manquantes dans {ctx.guild}: {error}")
        elif isinstance(error, commands.MemberNotFound):
            await ctx.send("‚ùå Utilisateur non trouv√©!")
        elif isinstance(error, commands.CommandNotFound):
            # Ajouter un log pour les commandes non trouv√©es
            self.logger.warning(f"Commande non trouv√©e: '{ctx.message.content}' par {ctx.author} dans {ctx.guild}")
            await ctx.send(f"‚ùå Commande inconnue: `{ctx.message.content}`. Tapez `+help` pour voir les commandes disponibles.")
        else:
            self.logger.error(f"Erreur de commande non g√©r√©e: {error} | Commande: {ctx.message.content} | Utilisateur: {ctx.author}")
            await ctx.send(f"‚ùå Une erreur s'est produite: {error}")

    async def on_message(self, message):
        """Event d√©clench√© √† chaque message"""
        # Ignorer les messages du bot
        if message.author == self.user:
            return
        
        # Log des messages commen√ßant par le pr√©fixe pour debug
        if message.content.startswith('+'):
            self.logger.info(f"Commande re√ßue: '{message.content}' de {message.author} dans {message.guild}")
        
        # Traiter les commandes
        await self.process_commands(message)

    @commands.command(name='test')
    async def test_cmd(self, ctx):
        """Commande de test pour v√©rifier que le bot fonctionne"""
        self.logger.info(f"Commande test ex√©cut√©e par {ctx.author} dans {ctx.guild}")
        await ctx.send("‚úÖ Le bot fonctionne correctement! Toutes les commandes sont op√©rationnelles.")

    @commands.command(name='help')
    async def help_cmd(self, ctx):
        """Affiche la liste des commandes disponibles"""
        self.logger.info(f"Commande help ex√©cut√©e par {ctx.author} dans {ctx.guild}")
        embed = discord.Embed(
            title="üõ°Ô∏è Bot de Mod√©ration - Aide",
            description="Liste des commandes disponibles",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üî® +ban",
            value="Bannir un utilisateur\n**Usage:** `+ban @utilisateur [raison]`\n**Ou:** R√©pondre √† un message avec `+ban [raison]`",
            inline=False
        )
        
        embed.add_field(
            name="üîì +unban", 
            value="D√©bannir un utilisateur\n**Usage:** `+unban @utilisateur`\n**Ou:** `+unban nom_utilisateur#discriminator`",
            inline=False
        )
        
        embed.add_field(
            name="üë¢ +kick",
            value="Expulser un utilisateur\n**Usage:** `+kick @utilisateur [raison]`\n**Ou:** R√©pondre √† un message avec `+kick [raison]`",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è Permissions requises",
            value="‚Ä¢ **Ban/Unban:** Permission `Bannir des membres`\n‚Ä¢ **Kick:** Permission `Expulser des membres`",
            inline=False
        )
        
        embed.set_footer(text="Bot de Mod√©ration", icon_url=self.user.avatar.url if self.user and self.user.avatar else None)
        
        await ctx.send(embed=embed)

    @commands.command(name='ban')
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    async def ban_user(self, ctx, member: discord.Member = None, *, reason=None):
        """
        Bannir un utilisateur du serveur
        Peut √™tre utilis√© en mentionnant un utilisateur ou en r√©pondant √† un message
        """
        self.logger.info(f"Commande ban ex√©cut√©e par {ctx.author} dans {ctx.guild} - membre: {member} - raison: {reason}")
        
        # D√©terminer l'utilisateur cible
        target_user = await get_target_user(ctx, member)
        if not target_user:
            await ctx.send("‚ùå Veuillez mentionner un utilisateur ou r√©pondre √† un message!")
            return
        
        # V√©rifications de permissions
        if not await check_moderation_permissions(ctx, target_user, "ban"):
            return
        
        # Raison par d√©faut
        if not reason:
            reason = f"Banni par {ctx.author}"
        else:
            reason = f"{reason} - Par {ctx.author}"
        
        try:
            # Tentative d'envoi d'un MP √† l'utilisateur
            try:
                embed = discord.Embed(
                    title="üî® Vous avez √©t√© banni",
                    description=f"Vous avez √©t√© banni du serveur **{ctx.guild.name}**",
                    color=discord.Color.red()
                )
                embed.add_field(name="Raison", value=reason, inline=False)
                embed.add_field(name="Mod√©rateur", value=ctx.author.mention, inline=True)
                await target_user.send(embed=embed)
            except discord.Forbidden:
                pass  # L'utilisateur n'accepte pas les MPs
            
            # Bannissement
            await target_user.ban(reason=reason, delete_message_days=0)
            
            # Message de confirmation
            embed = discord.Embed(
                title="üî® Utilisateur banni",
                description=f"**{target_user}** a √©t√© banni du serveur",
                color=discord.Color.red(),
                timestamp=datetime.now()
            )
            embed.add_field(name="Raison", value=reason, inline=False)
            embed.add_field(name="Mod√©rateur", value=ctx.author.mention, inline=True)
            
            await ctx.send(embed=embed)
            
            # Log de l'action
            log_moderation_action("BAN", ctx.author, target_user, reason, ctx.guild)
            
        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas les permissions pour bannir cet utilisateur!")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors du bannissement: {e}")
