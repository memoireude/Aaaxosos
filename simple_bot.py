import discord
from discord.ext import commands
import os
import logging
import datetime
import json

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration des intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True

# Cr√©er le bot
bot = commands.Bot(command_prefix='+', intents=intents)

# Dictionnaire pour stocker les r√¥les sauvegard√©s des utilisateurs mut√©s
muted_users_roles = {}

@bot.event
async def on_ready():
    logger.info(f'Bot connect√© en tant que {bot.user}!')
    logger.info(f'Connect√© √† {len(bot.guilds)} serveur(s)')

@bot.event
async def on_message(message):
    # Ignorer les messages du bot
    if message.author == bot.user:
        return

    # Traitement des commandes
    await bot.process_commands(message)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        # Ne rien faire pour les commandes inconnues
        return
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå Argument manquant. Utilisez `+commandes` pour voir la syntaxe correcte.")
        logger.error(f"Argument manquant: {error} | Message: {ctx.message.content}")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Vous n'avez pas les permissions n√©cessaires pour cette commande!")
        logger.error(f"Permissions manquantes: {error} | Utilisateur: {ctx.author}")
    else:
        logger.error(f"ERREUR COMMANDE: {error} | Message: {ctx.message.content}")
        await ctx.send(f"‚ùå Erreur: {error}")

# Commandes simples pour tester le bot

@bot.command(name='ping')
async def ping(ctx):
    logger.info(f"COMMANDE PING ex√©cut√©e par {ctx.author}")
    await ctx.send('üèì Pong! Le bot fonctionne!')

@bot.command(name='test')
async def test(ctx):
    logger.info(f"COMMANDE TEST ex√©cut√©e par {ctx.author}")
    await ctx.send('‚úÖ Test r√©ussi! Le bot r√©pond correctement.')

@bot.command(name='commandes')
async def commandes_command(ctx):
    logger.info(f"COMMANDE COMMANDES ex√©cut√©e par {ctx.author}")
    embed = discord.Embed(title="üõ°Ô∏è Commandes de Mod√©ration", color=0x00ff00)
    embed.add_field(name="+ping", value="Teste la connexion", inline=False)
    embed.add_field(name="+test", value="Test g√©n√©ral du bot", inline=False)
    embed.add_field(name="+ban @utilisateur [raison]", value="Bannir un utilisateur (mention ou r√©ponse)", inline=False)
    embed.add_field(name="+unban <ID_utilisateur> [raison]", value="D√©bannir un utilisateur avec son ID", inline=False)
    embed.add_field(name="+kick @utilisateur [raison]", value="Expulser un utilisateur (mention ou r√©ponse)", inline=False)
    embed.add_field(name="+mute @utilisateur1 [@utilisateur2...] [raison]", value="Mute un ou plusieurs utilisateurs et sauvegarde leurs r√¥les", inline=False)
    embed.add_field(name="+unmute @utilisateur/all [raison]", value="D√©mute et restaure automatiquement les r√¥les sauvegard√©s", inline=False)
    embed.add_field(name="+lock [all] [raison]", value="Verrouille le salon actuel ou tous les salons", inline=False)
    embed.add_field(name="+unlock [all] [raison]", value="D√©verrouille le salon actuel ou tous les salons", inline=False)
    embed.add_field(name="+commandes", value="Affiche cette liste de commandes", inline=False)
    await ctx.send(embed=embed)

# Initialisation du token
if __name__ == "__main__":
    token = os.getenv("DISCORD_TOKEN")
    if not token:
        logger.error("‚ùå DISCORD_TOKEN non trouv√©!")
    else:
        logger.info("üöÄ D√©marrage du bot...")
        bot.run(token)

@bot.command(name='ban')
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        if ctx.message.reference and ctx.message.reference.message_id:
            try:
                referenced_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
                if isinstance(referenced_message.author, discord.Member):
                    member = referenced_message.author
                else:
                    await ctx.send("‚ùå L'auteur du message n'est pas un membre de ce serveur!")
                    return
            except discord.NotFound:
                await ctx.send("‚ùå Message de r√©f√©rence non trouv√©!")
                return
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors de la r√©cup√©ration du message: {e}")
                return
        else:
            await ctx.send("‚ùå Veuillez mentionner un utilisateur ou r√©pondre √† un message pour bannir quelqu'un!")
            return
    
    try:
        await member.ban(reason=f"{reason} - Par {ctx.author}")
        await ctx.send(f"üî® {member} a √©t√© banni! Raison: {reason}")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors du ban: {e}")
        logger.error(f"ERREUR BAN: {e}")

@bot.command(name='kick')
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        if ctx.message.reference and ctx.message.reference.message_id:
            try:
                referenced_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
                if isinstance(referenced_message.author, discord.Member):
                    member = referenced_message.author
                else:
                    await ctx.send("‚ùå L'auteur du message n'est pas un membre de ce serveur!")
                    return
            except discord.NotFound:
                await ctx.send("‚ùå Message de r√©f√©rence non trouv√©!")
                return
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors de la r√©cup√©ration du message: {e}")
                return
        else:
            await ctx.send("‚ùå Veuillez mentionner un utilisateur ou r√©pondre √† un message pour expulser quelqu'un!")
            return
    
    try:
        await member.kick(reason=f"{reason} - Par {ctx.author}")
        await ctx.send(f"üë¢ {member} a √©t√© expuls√©! Raison: {reason}")
    except Exception as e:
        await ctx.send(f"‚ùå Erreur lors du kick: {e}")
        logger.error(f"ERREUR KICK: {e}")

@bot.command(name='mute')
@commands.has_permissions(manage_roles=True)
async def mute(ctx, *args):
    if not args:
        if ctx.message.reference and ctx.message.reference.message_id:
            try:
                referenced_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
                if isinstance(referenced_message.author, discord.Member):
                    members = [referenced_message.author]
                    reason = "Aucune raison sp√©cifi√©e"
                else:
                    await ctx.send("‚ùå L'auteur du message n'est pas un membre de ce serveur!")
                    return
            except discord.NotFound:
                await ctx.send("‚ùå Message de r√©f√©rence non trouv√©!")
                return
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors de la r√©cup√©ration du message: {e}")
                return
        else:
            await ctx.send("‚ùå Veuillez mentionner un ou plusieurs utilisateurs ou r√©pondre √† un message pour mute quelqu'un!")
            return
    else:
        members = []
        reason_parts = []
        for arg in args:
            try:
                member = await commands.MemberConverter().convert(ctx, arg)
                members.append(member)
            except commands.BadArgument:
                reason_parts.append(arg)
        
        reason = " ".join(reason_parts) if reason_parts else "Aucune raison sp√©cifi√©e"
        
        if not members:
            await ctx.send("‚ùå Aucun membre valide trouv√© dans votre commande!")
            return
    
    muted_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not muted_role:
        await ctx.send("‚ùå Aucun r√¥le 'Muted' trouv√© sur ce serveur!")
        return
    
    for member in members:
        try:
            if muted_role in member.roles:
                continue
            old_roles = [role.id for role in member.roles if role != ctx.guild.default_role]
            if old_roles:
                muted_users_roles[member.id] = old_roles
            new_roles = [ctx.guild.default_role, muted_role]
            await member.edit(roles=new_roles, reason=f"Mute - {reason} - Par {ctx.author}")
            await ctx.send(f"üîá {member} a √©t√© mute! Raison: {reason}")
        except Exception as e:
            await ctx.send(f"‚ùå Erreur lors du mute de {member}: {e}")
            logger.error(f"ERREUR MUTE: {e} pour {member}")
            
            bot.run(os.getenv("DISCORD_TOKEN"))
